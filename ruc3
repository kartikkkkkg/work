1. src/index.js

This is the entry point of your React app.

JavaScript
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css'; // Optional, but good practice

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
2. src/App.js

This is the central file for routing and state management.

JavaScript
import React, { useState, useEffect } from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';

import NavBar from './components/NavBar';
import HomePage from './components/HomePage';
import CustomersPage from './components/customers/CustomersPage';
import CustomerDetailsPage from './components/customers/CustomerDetailsPage';
import CustomerFormPage from './components/customers/CustomerFormPage';
import NotFoundPage from './components/NotFoundPage';

import customersData from './customers.json';
import './App.css';

const App = () => {
  const [customers, setCustomers] = useState([]);

  useEffect(() => {
    setCustomers(customersData);
  }, []);

  const handleAddCustomer = (newCustomer) => {
    const newId = customers.length > 0 ? Math.max(...customers.map(c => c.id)) + 1 : 1;
    const customerWithId = { ...newCustomer, id: newId };
    setCustomers([...customers, customerWithId]);
  };

  const handleEditCustomer = (updatedCustomer) => {
    const newCustomers = customers.map(c => 
      c.id === updatedCustomer.id ? updatedCustomer : c
    );
    setCustomers(newCustomers);
  };

  const handleDeleteCustomer = (customerId) => {
    const newCustomers = customers.filter(c => c.id !== customerId);
    setCustomers(newCustomers);
  };

  return (
    <BrowserRouter>
      <div className="App">
        <NavBar />
        
        <main className="content-container">
          <Routes>
            <Route path="/" element={<HomePage />} />
            
            <Route 
              path="/customers" 
              element={
                <CustomersPage 
                  customers={customers} 
                  onDelete={handleDeleteCustomer} 
                />
              } 
            />

            <Route 
              path="/customers/:id" 
              element={
                <CustomerDetailsPage customers={customers} />
              } 
            />

            <Route 
              path="/customers/add" 
              element={
                <CustomerFormPage onSave={handleAddCustomer} mode="add" />
              } 
            />

            <Route 
              path="/customers/edit/:id" 
              element={
                <CustomerFormPage 
                  customers={customers}
                  onSave={handleEditCustomer} 
                  mode="edit" 
                />
              } 
            />

            <Route path="*" element={<NotFoundPage />} />
          </Routes>
        </main>
      </div>
    </BrowserRouter>
  );
};

export default App;
3. src/App.css

Main styles for your application layout.

CSS
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f4f4f4;
}

.App {
  max-width: 1200px;
  margin: 0 auto;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  background-color: white;
}

.content-container {
  padding: 20px;
}
4. src/customers.json

Mock data for your customer list.

JSON
[
  {
    "id": 1,
    "firstName": "Sundar",
    "lastName": "Pichai",
    "email": "sundar.pichai@google.com"
  },
  {
    "id": 2,
    "firstName": "Satya",
    "lastName": "Nadella",
    "email": "satya.nadella@microsoft.com"
  },
  {
    "id": 3,
    "firstName": "Jeff",
    "lastName": "Bezos",
    "email": "jeff.bezos@amazon.com"
  },
  {
    "id": 4,
    "firstName": "Sergey",
    "lastName": "Brin",
    "email": "sergey.brin@google.com"
  },
  {
    "id": 5,
    "firstName": "Larry",
    "lastName": "Page",
    "email": "larry.page@google.com"
  }
]
5. src/components/NavBar.js

The navigation bar for routing.

JavaScript
import React from 'react';
import { NavLink } from 'react-router-dom';
import './NavBar.css';

const NavBar = () => {
  return (
    <nav className="nav-bar">
      <div className="nav-logo">TopGuns Bank</div>
      <ul className="nav-links">
        <li className="nav-item">
          <NavLink 
            to="/" 
            className={({ isActive }) => (isActive ? 'nav-link active' : 'nav-link')}
          >
            Home
          </NavLink>
        </li>
        <li className="nav-item">
          <NavLink 
            to="/customers" 
            className={({ isActive }) => (isActive ? 'nav-link active' : 'nav-link')}
          >
            Customers
          </NavLink>
        </li>
        <li className="nav-item">
          <NavLink 
            to="/about" 
            className={({ isActive }) => (isActive ? 'nav-link active' : 'nav-link')}
          >
            About SCB
          </NavLink>
        </li>
      </ul>
    </nav>
  );
};

export default NavBar;
6. src/components/NavBar.css

Styles for the navigation bar.

CSS
.nav-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 20px;
  background-color: #333;
  color: white;
  margin-bottom: 20px;
}

.nav-logo {
  font-size: 1.5em;
  font-weight: bold;
}

.nav-links {
  list-style: none;
  display: flex;
  margin: 0;
  padding: 0;
}

.nav-item {
  margin-left: 20px;
}

.nav-link {
  color: white;
  text-decoration: none;
  padding: 8px 12px;
  border-radius: 4px;
  transition: background-color 0.3s;
}

.nav-link:hover {
  background-color: #575757;
}

.nav-link.active {
  background-color: #007bff;
  font-weight: bold;
}
7. src/components/HomePage.js

The simple landing page.

JavaScript
import React from 'react';
import './Page.css';

const HomePage = () => {
  return (
    <div className="page-container">
      <h2>Welcome to the TopGuns Bank Customer Portal</h2>
      <p>This application allows administrators to manage customer accounts and view their details.</p>
      <p>Please use the navigation bar above to view the customer list or learn more about the bank.</p>
    </div>
  );
};

export default HomePage;
8. src/components/NotFoundPage.js

The 404 page for invalid routes.

JavaScript
import React from 'react';
import { Link } from 'react-router-dom';
import './Page.css';

const NotFoundPage = () => {
  return (
    <div className="page-container">
      <h2>404 - Page Not Found</h2>
      <p>The page you are looking for does not exist.</p>
      <Link to="/customers" className="back-link">Go back to Customers</Link>
    </div>
  );
};

export default NotFoundPage;
9. src/components/Page.css

Basic styles for your simple pages.

CSS
.page-container {
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
  text-align: center;
}

.page-container h2 {
  margin-bottom: 20px;
}

.back-link {
  color: #007bff;
  text-decoration: none;
  font-weight: bold;
}

.back-link:hover {
  text-decoration: underline;
}
10. src/components/customers/CustomersPage.js

The customer list page with CRUD actions.

JavaScript
import React from 'react';
import { useNavigate } from 'react-router-dom';
import './Customer.css';

const CustomersPage = ({ customers, onDelete }) => {
  const navigate = useNavigate();

  const handleShow = (id) => {
    navigate(`/customers/${id}`);
  };

  const handleEdit = (id) => {
    navigate(`/customers/edit/${id}`);
  };
  
  const handleDelete = (id) => {
    if (window.confirm('Are you sure you want to delete this customer?')) {
      onDelete(id);
    }
  };

  return (
    <div className="customers-page">
      <h2>Customers List</h2>
      <button onClick={() => navigate('/customers/add')} className="create-customer-button">
        Create new customer
      </button>
      <table>
        <thead>
          <tr>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {customers.map(customer => (
            <tr key={customer.id}>
              <td>{customer.id}</td>
              <td>{customer.firstName}</td>
              <td>{customer.lastName}</td>
              <td>{customer.email}</td>
              <td>
                <button onClick={() => handleShow(customer.id)} className="action-link">Show</button> | 
                <button onClick={() => handleEdit(customer.id)} className="action-link">Edit</button> | 
                <button onClick={() => handleDelete(customer.id)} className="action-link">Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CustomersPage;
11. src/components/customers/CustomerDetailsPage.js

The single customer details page.

JavaScript
import React from 'react';
import { useParams, Link } from 'react-router-dom';
import './Customer.css';

// Mock account data for demonstration
const mockAccountData = {
  1: [
    { accountNo: '1001999', type: 'SAVINGS ACCOUNT', branch: 'Bellandur', balance: 1000 },
    { accountNo: '1001888', type: 'SAVINGS ACCOUNT', branch: 'Indira Nagar', balance: 2000 }
  ],
  2: [
    { accountNo: '2002333', type: 'CURRENT ACCOUNT', branch: 'Electronic City', balance: 50000 }
  ],
  3: [
    { accountNo: '3003444', type: 'SAVINGS ACCOUNT', branch: 'Koramanagala', balance: 15000 }
  ],
  4: [
    { accountNo: '4004555', type: 'CURRENT ACCOUNT', branch: 'Jayanagar', balance: 75000 }
  ],
  5: [
    { accountNo: '5005666', type: 'SAVINGS ACCOUNT', branch: 'Marathahalli', balance: 25000 }
  ]
};

const CustomerDetailsPage = ({ customers }) => {
  const { id } = useParams();
  const customer = customers.find(c => c.id === parseInt(id));

  if (!customer) {
    return (
      <div className="page-container">
        <h2>Customer not found.</h2>
        <Link to="/customers" className="back-link">Back to Customer List</Link>
      </div>
    );
  }

  const accounts = mockAccountData[customer.id] || [];

  return (
    <div className="customer-details-page page-container">
      <Link to="/customers" className="back-link">Back to Customer List</Link>
      
      <h2>Customer Details</h2>
      <div className="details-card">
        <p><strong>ID:</strong> {customer.id}</p>
        <p><strong>First Name:</strong> {customer.firstName}</p>
        <p><strong>Last Name:</strong> {customer.lastName}</p>
        <p><strong>Email:</strong> {customer.email}</p>
      </div>

      <h3 className="accounts-heading">List of Accounts</h3>
      {accounts.length > 0 ? (
        <table className="accounts-table">
          <thead>
            <tr>
              <th>Account No</th>
              <th>Type</th>
              <th>Branch</th>
              <th>Balance</th>
            </tr>
          </thead>
          <tbody>
            {accounts.map((account, index) => (
              <tr key={index}>
                <td>{account.accountNo}</td>
                <td>{account.type}</td>
                <td>{account.branch}</td>
                <td>{account.balance}</td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <p>No accounts found for this customer.</p>
      )}
    </div>
  );
};

export default CustomerDetailsPage;
12. src/components/customers/CustomerFormPage.js

The form for adding and editing customers.

JavaScript
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import './Customer.css';

const CustomerFormPage = ({ customers, onSave, mode }) => {
  const { id } = useParams();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: ''
  });

  // Load data for editing
  useEffect(() => {
    if (mode === 'edit' && customers) {
      const customerToEdit = customers.find(c => c.id === parseInt(id));
      if (customerToEdit) {
        setFormData(customerToEdit);
      }
    }
  }, [mode, id, customers]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // Simple validation
    if (formData.firstName && formData.lastName && formData.email) {
      onSave(formData);
      navigate('/customers');
    } else {
      alert('Please fill out all fields.');
    }
  };

  return (
    <div className="customer-form-page page-container">
      <Link to="/customers" className="back-link">Back to Customer List</Link>
      
      <h2>{mode === 'add' ? 'Add New Customer' : 'Edit Customer'}</h2>
      <form onSubmit={handleSubmit} className="customer-form">
        <div className="form-group">
          <label>First Name</label>
          <input 
            type="text" 
            name="firstName" 
            value={formData.firstName} 
            onChange={handleChange} 
          />
        </div>
        <div className="form-group">
          <label>Last Name</label>
          <input 
            type="text" 
            name="lastName" 
            value={formData.lastName} 
            onChange={handleChange} 
          />
        </div>
        <div className="form-group">
          <label>Email</label>
          <input 
            type="email" 
            name="email" 
            value={formData.email} 
            onChange={handleChange} 
          />
        </div>
        <button type="submit" className="submit-button">
          {mode === 'add' ? 'Create Customer' : 'Save Changes'}
        </button>
      </form>
    </div>
  );
};

export default CustomerFormPage;
13. src/components/customers/Customer.css

Styles for your customer-related components.

CSS
/* CustomersPage.js */
.customers-page {
  text-align: center;
}

.create-customer-button {
  padding: 10px 15px;
  background-color: #28a745;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin-bottom: 20px;
}

.customers-page table {
  width: 100%;
  border-collapse: collapse;
}

.customers-page th,
.customers-page td {
  border: 1px solid #ddd;
  padding: 12px;
  text-align: left;
}

.customers-page th {
  background-color: #f2f2f2;
}

.action-link {
  background: none;
  border: none;
  color: #007bff;
  cursor: pointer;
  font-size: 14px;
  margin: 0 5px;
}

/* CustomerDetailsPage.js */
.customer-details-page {
  text-align: left;
}

.details-card {
  border: 1px solid #ddd;
  padding: 20px;
  border-radius: 8px;
  margin-bottom: 20px;
  background-color: #f9f9f9;
}

.accounts-heading {
  margin-top: 30px;
  margin-bottom: 10px;
}

.accounts-table {
  width: 100%;
  border-collapse: collapse;
}

.accounts-table th,
.accounts-table td {
  border: 1px solid #ddd;
  padding: 10px;
  text-align: left;
}

.accounts-table th {
  background-color: #f2f2f2;
}

/* CustomerFormPage.js */
.customer-form-page {
  text-align: center;
}

.customer-form {
  max-width: 500px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.form-group {
  margin-bottom: 15px;
  text-align: left;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

.form-group input {
  width: 100%;
  padding: 10px;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.submit-button {
  width: 100%;
  padding: 12px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
}

.submit-button:hover {
  background-color: #0056b3;
}
