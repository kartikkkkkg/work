// File: src/main/java/assignments/uc1/repository/custrepo.java

import org.springframework.stereotype.Repository;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Repository
public class custrepo {

    private final List<customerm> customerList = new ArrayList<>();

    public customerm save(customerm customer) {
        customerList.add(customer);
        return customer;
    }

    public List<customerm> findAll() {
        return customerList;
    }

    public Optional<customerm> findById(int id) {
        return customerList.stream()
                           .filter(customer -> customer.getId() == id)
                           .findFirst();
    }

    public void deleteById(int id) {
        customerList.removeIf(customer -> customer.getId() == id);
    }

    public customerm update(int id, customerm updatedCustomer) {
        for (int i = 0; i < customerList.size(); i++) {
            if (customerList.get(i).getId() == id) {
                customerList.set(i, updatedCustomer);
                return updatedCustomer;
            }
        }
        return null; // Return null if the customer is not found
    }
}



// File: src/main/java/assignments/uc1/controller/customer.java

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import assignments.uc1.model.customerm;
import assignments.uc1.repository.custrepo;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/customers")
public class customer {

    private final custrepo customerRepository;

    @Autowired
    public customer(custrepo customerRepository) {
        this.customerRepository = customerRepository;
    }

    @GetMapping
    public List<customerm> getAllCustomers() {
        return customerRepository.findAll();
    }

    @GetMapping("/{id}")
    public Optional<customerm> getCustomerById(@PathVariable int id) {
        return customerRepository.findById(id);
    }

    @PostMapping
    public customerm createCustomer(@RequestBody customerm customer) {
        return customerRepository.save(customer);
    }

    @PutMapping("/{id}")
    public customerm updateCustomer(@PathVariable int id, @RequestBody customerm updatedCustomer) {
        return customerRepository.update(id, updatedCustomer);
    }

    @DeleteMapping("/{id}")
    public String deleteCustomer(@PathVariable int id) {
        customerRepository.deleteById(id);
        return "Customer with ID " + id + " has been deleted.";
    }
}
